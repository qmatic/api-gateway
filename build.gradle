buildscript {
    ext {
        springBootVersion = '2.4.3'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.18.3')
    }
}
plugins {
    id 'org.springframework.boot' version '2.4.3'
}
repositories {
    jcenter()
    maven { url "http://artifactory-dev.qmatic.net/artifactory/api-gateway" }
}

apply plugin: 'application'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'distribution'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

applicationName = 'api-gateway'
version = "${currentVersion}"
archivesBaseName = "${qpApiGateway}"

def passwordProperty = project.hasProperty('password') ? password : "dummy"

mainClassName = "com.qmatic.apigw.Application"

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile ("org.springframework.boot:spring-boot-starter-web")
    compile ("org.springframework.boot:spring-boot-starter-undertow")
    compile ("org.springframework.boot:spring-boot-starter-cache")
    compile ("org.springframework.boot:spring-boot-configuration-processor")
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compile ("org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.1")
    compile ("org.springframework.cloud:spring-cloud-starter-netflix-zuul:2.2.7.RELEASE")

    //Cache metrics : spring-boot-starter-web, spring-boot-starter-actuator
    // compile group: 'javax.xml', name: 'jaxrpc-api', version: '2.0_EA1'
    compileOnly 'org.projectlombok:lombok:1.18.18'
    annotationProcessor 'org.projectlombok:lombok:1.18.18'

    //TODO use library.ehcache
    compile ("net.sf.ehcache:ehcache:2.10.6")
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'org.json', name: 'json', version: '20201115'
    implementation group: 'com.netflix.netflix-commons', name: 'netflix-commons-util', version: '0.3.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'

    compile files('libs/qp-common-logging-3.1.0.jar')

    testCompile ("org.testng:testng:6.10")

    testCompile ("org.springframework.boot:spring-boot-starter-test")
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()
}

compileJava.dependsOn(processResources)

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

idea {
    idea.module.testSourceDirs += file("src/integration-test/java")
    idea.module.testSourceDirs += file("src/integration-test/resources")
}

task integrationTest(type: Test) {
    mustRunAfter test
    testClassesDirs = sourceSets.integrationTest.output
    classpath = sourceSets.integrationTest.runtimeClasspath
    useTestNG()
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
// Add build-info.properties into META-INF
springBoot {
    buildInfo()
}

jar {
    enabled = true
    manifest {
        attributes 'Implementation-Title': 'com.qmatic.apigw'
        attributes 'Implementation-Version': version
    }
}

task qpCommonGeoJar(type: Jar) {
    from sourceSets.main.output.classesDirs
    exclude '**/apigw/**'
    exclude '**/*.json'
    manifest {
        attributes 'Implementation-Title': 'com.qmatic.apigw'
        attributes 'Implementation-Version': version
    }
    archiveBaseName = "${qpCommonGeo}"
}

artifacts {
    archives qpCommonGeoJar
    archives file(buildDir.path + "/distributions/" + "${qpApiGateway}" + "-" + version + ".zip")
}

/* configuration for debugging the gateway */
   //applicationDefaultJvmArgs = [ "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" ]


/* configuration for publishing artifacts to Qmatic artifactory */

artifactory {
    contextUrl = "http://artifactory.qmatic.com/artifactory"
    publish {
        repository {
            repoKey = "api-gateway"
            username = "${artifactory_username}"
            password = passwordProperty
            maven = true
        }
        defaults {
            publications('windist','linuxdist','geojar')
        }
    }
}

publishing { 
    publications {
        windist(MavenPublication) {
            artifact buildDir.path + "/distributions/QP_APIGateway_win64-"+version+".zip"
            groupId "com.qmatic"
            artifactId "QP_APIGateway_win64"
            version project.version
        }
        linuxdist(MavenPublication) {
            artifact buildDir.path + "/distributions/QP_APIGateway_linux64-"+version+".zip"
            groupId "com.qmatic"
            artifactId "QP_APIGateway_linux64"
            version project.version
        }
        geojar(MavenPublication) {
            artifact qpCommonGeoJar
            groupId "com.qmatic"
            artifactId "${qpCommonGeo}"
            version project.version
        }
    }
}
/* configuration for generating start script and generating token / password */

task apiTokenGeneratorStartScripts(type: CreateStartScripts) {
    description "Create start scripts for ApiTokenGenerator"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClassName = 'com.qmatic.apigw.ApiTokenGenerator'
    applicationName = 'api-token-generator'

    // workaround for https://issues.gradle.org/browse/GRADLE-3084
    doLast {
        doLastWithScripts(windowsScript, unixScript)
    }
}

task passwordEncoderStartScripts(type: CreateStartScripts) {
    description "Create start scripts for PasswordEncoder"
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    mainClassName = 'com.qmatic.apigw.PasswordEncoder'
    applicationName = 'password-encoder'

    // workaround for https://issues.gradle.org/browse/GRADLE-3084
    doLast {
        doLastWithScripts(windowsScript, unixScript)
    }
}

distributions {
    main {
        contents {
            into('bin') {
                from apiTokenGeneratorStartScripts
                    fileMode = 0755
                from passwordEncoderStartScripts
                    fileMode = 0755
                from('src/main/resources/scripts')
                from('src/main/resources/bin')
            }
            into('conf') {
                from('src/main/resources') {
                    exclude 'scripts'
                    exclude 'logs'
                    exclude 'bin'
                    include '**/application.yml'
                    include '**/application_MobileTicket.yml'
                    include '**/ehcache.xml'
                    include '**/logbackAPIGateway.xml'
                }
            }
            // We need an empty logs folder as it needs to exist for logging
            into('logs') {
                from('src/main/resources/logs')
            }
        }
    }
}

startScripts {

    defaultJvmOpts = ['DEFAULT_JVM_OPTS_REPLACE']

    doLast {
        doLastWithScripts(windowsScript, unixScript)

        def defaultJvmOptsLinux = '-Dlogging.config=$APP_HOME/conf/logbackAPIGateway.xml\" \"-Dapp.home=$APP_HOME'
        def defaultJvmOptsWindows = '-Dlogging.config=%~dp0\\..\\conf\\logbackAPIGateway.xml\" \"-Dapp.home=%~dp0\\..'

        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS_REPLACE', defaultJvmOptsLinux)
        windowsScript.text = windowsScript.text.replace('DEFAULT_JVM_OPTS_REPLACE', defaultJvmOptsWindows)
    }
}

// workaround for https://issues.gradle.org/browse/GRADLE-3084
def doLastWithScripts(windowsScript, unixScript) {

    // Fixes Windows classpath issue when classpath becomes too long
    def configureWindowsClassPath = { line ->
        line.replaceAll(~/^set CLASSPATH.*$/) { newLine ->
            'set CLASSPATH=%APP_HOME%\\conf;%APP_HOME%\\lib\\*'
        }
    }

    unixScript.text = unixScript.text.replace('APP_HOME="`pwd -P`"', 'APP_HOME="`pwd -P`"\nJAVA_HOME_PLACEHOLDER')
    unixScript.text = unixScript.text.replace('JAVA_HOME_PLACEHOLDER',
            'if [ -d "$APP_HOME/jre" ]; then\n' +
            '    JAVA_HOME="$APP_HOME/jre" \n' +
            '    chmod u+x $JAVA_HOME/bin/*\n' +
            'fi')
    unixScript.text = unixScript.text.replace('CLASSPATH=', 'CLASSPATH=$APP_HOME/conf:')
    unixScript.text = unixScript.text.replace('eval set -- ', 'export APP_HOME\neval set -- ');
    unixScript.text = unixScript.text.replace('\\$', '$')

    windowsScript.text = windowsScript.text.replace('set APP_HOME=%DIRNAME%..','set APP_HOME=%DIRNAME%..\nJAVA_HOME_PLACEHOLDER')
    windowsScript.text = windowsScript.text.replace('JAVA_HOME_PLACEHOLDER','if exist "%APP_HOME%/jre" set JAVA_HOME=%APP_HOME%/jre')
    windowsScript.text = windowsScript
            .readLines()
            .collect(configureWindowsClassPath)
            .join('\r\n')
}

def windowsScripts = ['**/*.bat', '**/*.exe']
def linuxScripts = ['**/*.sh', '**/api-gateway', '**/api-gateway-service', '**/api-token-generator', '**/password-encoder']

distZip {
    // To make sure that the use of apiTokenGeneratorStartScripts doesn't add duplicates to the zip file
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    baseName = "${qpApiGateway}"
}

distTar.enabled = false

/* Create os specific package zip files which included jre */

def dependencyDir = file(projectDir.path + '/deps')
def unzippedDir = file(buildDir.path + '/unzipped')

task copyGatewayDistributable(type: Copy, dependsOn: build) {
    from zipTree(buildDir.path + '/distributions/' + "${qpApiGateway}"  + "-" + version + ".zip")
    into unzippedDir
}

task copyLinux64Java(type: Copy, dependsOn : copyGatewayDistributable) {
    from zipTree(dependencyDir.path + "/${linux_jre_64_file}")
    into unzippedDir.path + '/linux'
}

task copyWin64Java(type: Copy, dependsOn : copyGatewayDistributable) {
    from zipTree(dependencyDir.path + "/${windows_jre_64_file}")
    into unzippedDir.path + '/win'
}

task copyTrustStore(type: Copy, dependsOn: copyWin64Java) {
    from unzippedDir.path + "/win/${jreVersion}/lib/security/cacerts"
    into unzippedDir.path + "/${qpApiGateway}"  + "-" + version + "/conf/"
    rename ('cacerts', 'truststore.jks')
}

task buildDistGatewayWindows(type: Zip) {
    from fileTree(unzippedDir.path + "/${qpApiGateway}"  + "-" + version) {
        exclude 'bin/curl.ermine'
        exclude 'bin/*.sh'
        exclude 'bin/api-gateway-service'
        exclude 'bin/api-gateway'
        exclude 'bin/api-token-generator'
        exclude 'bin/install-api-gateway-service'
        exclude 'bin/uninstall-api-gateway-service'
        exclude 'bin/password-encoder'
        into '/'
    }
    from (unzippedDir.path + "/win/${windows_jre_64_version}/.") {
        into "/jre"
    }
    baseName 'QP_APIGateway_win64'
}
buildDistGatewayWindows.dependsOn(copyWin64Java, copyTrustStore)


task buildDistGatewayLinux(type: Zip) {
    from fileTree(unzippedDir.path + "/${qpApiGateway}"  + "-" + version) {
        exclude 'bin/*.bat'
        exclude 'bin/*.exe'
        into '/'
    }
    from (unzippedDir.path + "/linux/${linux_jre_64_version}/.") {
        into "/jre"
    }
    baseName 'QP_APIGateway_linux64'
}
buildDistGatewayLinux.dependsOn(copyLinux64Java, copyTrustStore)

task buildDistGatewayPackage {
    doLast{
    }
}

buildDistGatewayPackage.dependsOn(qpCommonGeoJar)
buildDistGatewayPackage.dependsOn(buildDistGatewayLinux)
buildDistGatewayPackage.dependsOn(buildDistGatewayWindows)

